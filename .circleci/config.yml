# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

# Define jobs
jobs:
  test:
    # Usar imagen con Java 17 preinstalado
    docker:
      - image: cimg/openjdk:17.0
    
    steps:
      # Checkout del c贸digo
      - checkout
      
      # Restaurar cache de Gradle
      - restore_cache:
          keys:
            - gradle-deps-v1-{{ checksum "build.gradle" }}
            - gradle-deps-v1-
      
      # Dar permisos a gradlew
      - run:
          name: Make gradlew executable
          command: chmod +x ./gradlew
      
      # Ejecutar tests
      - run:
          name: Run tests
          command: ./gradlew test --no-daemon
      
      # Construir aplicaci贸n
      - run:
          name: Build application
          command: ./gradlew build --no-daemon
      
      # Guardar cache
      - save_cache:
          key: gradle-deps-v1-{{ checksum "build.gradle" }}
          paths:
            - ~/.gradle
      
      # Guardar resultados de tests
      - store_test_results:
          path: build/test-results/test
      
      # Guardar artifacts
      - store_artifacts:
          path: build/libs
          destination: jars

  docker-build:
    # Usar imagen base con Docker
    docker:
      - image: cimg/base:current
    
    steps:
      # Checkout del c贸digo
      - checkout
      
      # Setup Docker remoto (para plan gratuito)
      - setup_remote_docker:
          version: 20.10.18
      
      # Verificar Docker
      - run:
          name: Check Docker
          command: |
            docker --version
            docker info
      
      # Instalar Docker Compose
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
      
      # Construir imagen Docker
      - run:
          name: Build Docker image
          command: |
            docker build -t biblioteca-app .
            docker images
      
      # Verificar que la imagen se construy贸 correctamente
      - run:
          name: Test Docker image
          command: |
            echo "Docker image built successfully"
            docker inspect biblioteca-app

# Orchestrate jobs using workflows
workflows:
  test-and-build:
    jobs:
      # Ejecutar tests primero
      - test
      # Ejecutar Docker build solo si tests pasan
      - docker-build:
          requires:
            - test